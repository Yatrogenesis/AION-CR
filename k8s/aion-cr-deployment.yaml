apiVersion: apps/v1
kind: Deployment
metadata:
  name: aion-cr-api
  namespace: aion-cr
  labels:
    app: aion-cr-api
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
  selector:
    matchLabels:
      app: aion-cr-api
  template:
    metadata:
      labels:
        app: aion-cr-api
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: aion-cr-service-account
      containers:
      - name: aion-cr-api
        image: aion-cr/aion-cr:v1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
        - containerPort: 9090
          name: metrics
        env:
        - name: RUST_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: aion-cr-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: aion-cr-secrets
              key: redis-url
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: aion-cr-secrets
              key: jwt-secret
        - name: AUTONOMOUS_MODE
          value: "maximum"
        - name: ML_GPU_ENABLED
          value: "true"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "8Gi"
            cpu: "4000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: config
          mountPath: /app/config
          readOnly: true
        - name: models
          mountPath: /app/models
        - name: logs
          mountPath: /app/logs
      volumes:
      - name: config
        configMap:
          name: aion-cr-config
      - name: models
        persistentVolumeClaim:
          claimName: aion-cr-models-pvc
      - name: logs
        persistentVolumeClaim:
          claimName: aion-cr-logs-pvc
      nodeSelector:
        kubernetes.io/arch: amd64
      tolerations:
      - key: "nvidia.com/gpu"
        operator: "Exists"
        effect: "NoSchedule"
---
apiVersion: v1
kind: Service
metadata:
  name: aion-cr-api-service
  namespace: aion-cr
  labels:
    app: aion-cr-api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: aion-cr-api
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aion-cr-ingress
  namespace: aion-cr
  annotations:
    kubernetes.io/ingress.class: nginx
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
spec:
  tls:
  - hosts:
    - api.aion-cr.ai
    secretName: aion-cr-tls
  rules:
  - host: api.aion-cr.ai
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aion-cr-api-service
            port:
              number: 80