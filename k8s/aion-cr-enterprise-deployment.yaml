apiVersion: apps/v1
kind: Deployment
metadata:
  name: aion-cr-core
  namespace: aion-cr-production
  labels:
    app: aion-cr-core
    version: v1.0.0
    tier: backend
    component: compliance-engine
spec:
  replicas: 5
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 1
  selector:
    matchLabels:
      app: aion-cr-core
  template:
    metadata:
      labels:
        app: aion-cr-core
        version: v1.0.0
        tier: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: aion-cr-service-account
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
      containers:
      - name: aion-cr-core
        image: aion-cr/compliance-engine:1.0.0
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 8443
          name: https
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: aion-cr-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: aion-cr-secrets
              key: redis-url
        - name: ENCRYPTION_KEY
          valueFrom:
            secretKeyRef:
              name: aion-cr-secrets
              key: encryption-key
        - name: API_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: aion-cr-secrets
              key: api-secret-key
        - name: QUANTUM_CRYPTO_ENABLED
          value: "true"
        - name: ML_MODELS_PATH
          value: "/app/models"
        - name: COMPLIANCE_DATA_PATH
          value: "/app/data"
        resources:
          requests:
            memory: "2Gi"
            cpu: "1000m"
          limits:
            memory: "4Gi"
            cpu: "2000m"
        volumeMounts:
        - name: aion-cr-config
          mountPath: /app/config
          readOnly: true
        - name: aion-cr-data
          mountPath: /app/data
        - name: aion-cr-models
          mountPath: /app/models
          readOnly: true
        - name: aion-cr-logs
          mountPath: /app/logs
        livenessProbe:
          httpGet:
            path: /health/live
            port: 8080
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health/ready
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health/startup
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
      volumes:
      - name: aion-cr-config
        configMap:
          name: aion-cr-config
      - name: aion-cr-data
        persistentVolumeClaim:
          claimName: aion-cr-data-pvc
      - name: aion-cr-models
        persistentVolumeClaim:
          claimName: aion-cr-models-pvc
      - name: aion-cr-logs
        persistentVolumeClaim:
          claimName: aion-cr-logs-pvc
      nodeSelector:
        kubernetes.io/arch: amd64
        node.kubernetes.io/instance-type: "high-memory"
      tolerations:
      - key: "aion-cr-dedicated"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - aion-cr-core
              topologyKey: kubernetes.io/hostname
---
apiVersion: v1
kind: Service
metadata:
  name: aion-cr-core-service
  namespace: aion-cr-production
  labels:
    app: aion-cr-core
    service: backend
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-east-1:123456789:certificate/aion-cr-ssl"
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
spec:
  type: LoadBalancer
  selector:
    app: aion-cr-core
  ports:
  - name: http
    port: 80
    targetPort: 8080
    protocol: TCP
  - name: https
    port: 443
    targetPort: 8443
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: 9090
    protocol: TCP
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 300
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: aion-cr-ingress
  namespace: aion-cr-production
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    nginx.ingress.kubernetes.io/cors-allow-origin: "https://aion-cr.enterprise.com"
    nginx.ingress.kubernetes.io/enable-cors: "true"
spec:
  tls:
  - hosts:
    - api.aion-cr.enterprise.com
    - app.aion-cr.enterprise.com
    secretName: aion-cr-tls
  rules:
  - host: api.aion-cr.enterprise.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aion-cr-core-service
            port:
              number: 80
  - host: app.aion-cr.enterprise.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: aion-cr-ui-service
            port:
              number: 80
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: aion-cr-service-account
  namespace: aion-cr-production
  annotations:
    eks.amazonaws.com/role-arn: "arn:aws:iam::123456789:role/AionCRServiceRole"
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: aion-cr-production
  name: aion-cr-role
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints", "persistentvolumeclaims", "events", "configmaps", "secrets"]
  verbs: ["get", "list", "watch", "create", "update", "patch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "replicasets", "statefulsets"]
  verbs: ["get", "list", "watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: aion-cr-role-binding
  namespace: aion-cr-production
subjects:
- kind: ServiceAccount
  name: aion-cr-service-account
  namespace: aion-cr-production
roleRef:
  kind: Role
  name: aion-cr-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: aion-cr-config
  namespace: aion-cr-production
data:
  production.toml: |
    [server]
    host = "0.0.0.0"
    port = 8080
    https_port = 8443
    metrics_port = 9090
    workers = 8
    max_connections = 1000

    [database]
    max_pool_size = 50
    connection_timeout = 30
    query_timeout = 60

    [redis]
    max_pool_size = 20
    connection_timeout = 10

    [security]
    encryption_enabled = true
    quantum_crypto_enabled = true
    rate_limiting_enabled = true
    cors_enabled = true

    [compliance]
    frameworks = ["GDPR", "HIPAA", "SOX", "PCI_DSS", "ISO_27001", "AI_ACT"]
    jurisdictions = ["EU", "US", "UK", "APAC", "GLOBAL"]

    [monitoring]
    metrics_enabled = true
    tracing_enabled = true
    logging_level = "info"

    [ml]
    models_path = "/app/models"
    training_enabled = true
    prediction_cache_size = 10000
---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: aion-cr-hpa
  namespace: aion-cr-production
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: aion-cr-core
  minReplicas: 3
  maxReplicas: 20
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 5
        periodSeconds: 60
      selectPolicy: Max
---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: aion-cr-pdb
  namespace: aion-cr-production
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: aion-cr-core